# packages

from collections import Counter
from sklearn.cluster import KMeans
from matplotlib import colors
import matplotlib.pyplot as plt
import numpy as np
import cv2

# read image

image = cv2.imread('KeyWest.JPG') # replace KeyWest.JPG with your image
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image)

# convert to hex

def rgb_to_hex(rgb_color):
    hex_color = "#"
    for i in rgb_color:
        i = int(i)
        hex_color += ("{:02x}".format(i))
    return hex_color

# prep image

def prep_image(raw_img):
    modified_img = cv2.resize(raw_img, (900, 600), interpolation = cv2.INTER_AREA)
    modified_img = modified_img.reshape(modified_img.shape[0]*modified_img.shape[1], 3)
    return modified_img

# color analysis

def color_analysis(img):
    clf = KMeans(n_clusters = 30)
    color_labels = clf.fit_predict(img)
    center_colors = clf.cluster_centers_
    
    counts = Counter(color_labels)
    ordered_colors = [center_colors[i] for i in counts.keys()]
    hex_colors = [rgb_to_hex(ordered_colors[i]) for i in counts.keys()]

    
    plt.figure(figsize = (12, 8))
    plt.title('Colors of Key West',fontweight='bold')
    plt.pie(counts.values(), labels = hex_colors, colors = hex_colors, autopct='%1.0f%%', pctdistance=1.1, labeldistance=1.2, startangle=90, counterclock=False)
    plt.savefig("color_analysis_report.png", dpi = 500)
    
    print(hex_colors)    

image2 = cv2.imread("color_analysis_report.png")
image2.shape

# side-by-side simple view

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib import rcParams
from PIL import Image

%matplotlib inline

# figure size in inches optional
rcParams['figure.figsize'] = 11 ,8

# read images
img_A =  image
img_B = Image.open('color_analysis_report.png')

# display images
fig, ax = plt.subplots(1,2)
ax[0].imshow(img_A);
ax[1].imshow(img_B);


# Side-by-Side Complex
import cv2

code = cv2.imread('pil_text.png')
img1 = cv2.imread('KeyWest.JPG')
img2 = cv2.imread('color_analysis_report.png')

# view shape of images
img1.shape   # my result (3024, 4032, 3)
img2.shape   # my result (4000, 6000, 3)

# here we take the dimension of the smallest image to convert to same size without losing quality.
dim = (4032, 3024)

resized_code = cv2.resize(code, dim, interpolation = cv2.INTER_AREA) 
resized_img1 = cv2.resize(img1, dim, interpolation = cv2.INTER_AREA)
resized_img2 = cv2.resize(img2, dim, interpolation = cv2.INTER_AREA)

# create merged file
im_h = cv2.hconcat([resized_code, resized_img1, resized_img2])
cv2.imwrite('merged3.jpg', im_h)


